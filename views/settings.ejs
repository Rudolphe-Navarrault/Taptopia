<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Paramètres</title>
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>
    <!-- Conteneur de notifications -->
    <div class="notifications-container"></div>

    <div class="settings-container">
      <h2 data-translate="settings">Paramètres</h2>

      <form id="settings-form" class="settings-form">
        <div class="settings-section">
          <h3 data-translate="language">Langue</h3>
          <div class="form-group">
            <select
              id="language"
              name="language"
              class="settings-select"
              style="
                appearance: none;
                background-image: url('data:image/svg+xml;utf8,<svg fill=\'%23333\' height=\'24\' viewBox=\'0 0 24 24\' width=\'24\' xmlns=\'http://www.w3.org/2000/svg\'><path d=\'M7 10l5 5 5-5z\'/></svg>');
                background-repeat: no-repeat;
                background-position: right 8px center;
                padding-right: 30px;
              "
            >
              <option value="fr">Français</option>
              <option value="en">English</option>
            </select>
          </div>
        </div>

        <div class="settings-section">
          <h3 data-translate="theme">Thème</h3>
          <div class="form-group">
            <select
              id="theme"
              name="theme"
              class="settings-select"
              style="
                appearance: none;
                background-image: url('data:image/svg+xml;utf8,<svg fill=\'%23333\' height=\'24\' viewBox=\'0 0 24 24\' width=\'24\' xmlns=\'http://www.w3.org/2000/svg\'><path d=\'M7 10l5 5 5-5z\'/></svg>');
                background-repeat: no-repeat;
                background-position: right 8px center;
                padding-right: 30px;
              "
            >
              <option value="light" data-translate="lightTheme">Clair</option>
              <option value="dark" data-translate="darkTheme">Sombre</option>
            </select>
          </div>
        </div>

        <div class="settings-section">
          <h3 data-translate="autoSave">Sauvegarde automatique</h3>
          <div class="form-group">
            <div class="settings-value-container">
              <select
                id="auto-save-select"
                name="autoSave"
                class="settings-select"
                style="
                  appearance: none;
                  background-image: url('data:image/svg+xml;utf8,<svg fill=\'%23333\' height=\'24\' viewBox=\'0 0 24 24\' width=\'24\' xmlns=\'http://www.w3.org/2000/svg\'><path d=\'M7 10l5 5 5-5z\'/></svg>');
                  background-repeat: no-repeat;
                  background-position: right 8px center;
                  padding-right: 30px;
                "
              >
                <option value="0" data-translate="autoSaveDisabled">
                  Désactivée
                </option>
                <option value="5" data-translate="autoSave5Sec">
                  Toutes les 5 secondes
                </option>
                <option value="10" data-translate="autoSave10Sec">
                  Toutes les 10 secondes
                </option>
                <option value="15" data-translate="autoSave15Sec">
                  Toutes les 15 secondes
                </option>
                <option value="30" data-translate="autoSave30Sec">
                  Toutes les 30 secondes
                </option>
                <option value="60" data-translate="autoSave1Min">
                  Toutes les minutes
                </option>
                <option value="300" data-translate="autoSave5Min">
                  Toutes les 5 minutes
                </option>
                <option value="900" data-translate="autoSave15Min">
                  Toutes les 15 minutes
                </option>
                <option value="1800" data-translate="autoSave30Min">
                  Toutes les 30 minutes
                </option>
                <option value="3600" data-translate="autoSave1Hour">
                  Toutes les heures
                </option>
              </select>
            </div>
            <span id="auto-save-timer" class="auto-save-timer"></span>
          </div>
        </div>

        <div class="settings-section">
          <div class="settings-item notifications-item">
            <h3>
              <label for="notifications-toggle" data-translate="notifications"
                >Notifications</label
              >
            </h3>
            <label class="switch">
              <input type="checkbox" id="notifications-toggle" />
              <span class="slider round"></span>
            </label>
          </div>
        </div>

        <div
          class="button-container"
          style="
            margin-top: 30px;
            display: flex;
            justify-content: center;
            gap: 20px;
            align-items: center;
          "
        >
          <button
            type="submit"
            class="btn btn-primary"
            data-translate="save"
            style="
              width: 150px;
              height: 40px;
              font-size: 14px;
              font-weight: 500;
              line-height: 40px;
              padding: 0;
              margin: 0;
            "
          >
            Sauvegarder
          </button>
          <button
            type="button"
            class="btn btn-danger"
            style="
              width: 150px;
              height: 40px;
              font-size: 14px;
              font-weight: 500;
              line-height: 40px;
              padding: 0;
              margin: 0;
              background-color: #dc3545;
              border-color: #dc3545;
              color: white;
              border-radius: 4px;
              cursor: pointer;
              transition: background-color 0.3s ease;
            "
          >
            Annuler
          </button>
        </div>
      </form>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        // Style commun pour les sélecteurs
        const styleSelects = () => {
          const selects = document.querySelectorAll(".settings-select");
          selects.forEach((select) => {
            select.style.width = "200px";
            select.style.padding = "8px 12px";
            select.style.borderRadius = "4px";
            select.style.border = "1px solid #ccc";
            select.style.backgroundColor = "white";
            select.style.cursor = "pointer";
            select.style.fontSize = "14px";
            select.style.transition = "border-color 0.3s ease";
          });
        };

        // Appliquer le style aux sélecteurs
        styleSelects();

        let originalSettings = null;
        let currentSettings = null;
        const cancelButton = document.querySelector(".btn-danger");

        // Fonction pour vérifier si les paramètres ont été modifiés
        const hasSettingsChanged = () => {
          if (!originalSettings || !currentSettings) return false;
          return (
            JSON.stringify(originalSettings) !== JSON.stringify(currentSettings)
          );
        };

        // Fonction pour mettre à jour l'état du bouton Annuler
        const updateCancelButton = () => {
          if (hasSettingsChanged()) {
            cancelButton.style.opacity = "1";
            cancelButton.style.cursor = "pointer";
          } else {
            cancelButton.style.opacity = "0.5";
            cancelButton.style.cursor = "not-allowed";
          }
        };

        // Fonction pour appliquer les paramètres
        const applySettings = (settings) => {
          document.documentElement.lang = settings.language;
          document.body.className = settings.theme;
        };

        // Fonction pour mettre à jour les valeurs du formulaire
        const updateFormValues = (settings) => {
          document.getElementById("language").value = settings.language;
          document.getElementById("theme").value = settings.theme;
          document.getElementById("notifications-toggle").checked =
            settings.notifications;
          document.getElementById("auto-save-select").value = settings.autoSave;
        };

        // Charger les paramètres actuels
        try {
          const response = await fetch("/api/settings");
          if (response.ok) {
            originalSettings = await response.json();
            currentSettings = { ...originalSettings };
            updateFormValues(originalSettings);
            applySettings(originalSettings);
            updateCancelButton();
          }
        } catch (error) {
          console.error("Erreur lors du chargement des paramètres:", error);
        }

        // Gérer les changements de paramètres en temps réel
        document.getElementById("language").addEventListener("change", (e) => {
          currentSettings.language = e.target.value;
          applySettings(currentSettings);
          updateCancelButton();
        });

        document.getElementById("theme").addEventListener("change", (e) => {
          currentSettings.theme = e.target.value;
          applySettings(currentSettings);
          updateCancelButton();
        });

        document
          .getElementById("notifications-toggle")
          .addEventListener("change", (e) => {
            currentSettings.notifications = e.target.checked;
            updateCancelButton();
          });

        document
          .getElementById("auto-save-select")
          .addEventListener("change", (e) => {
            currentSettings.autoSave = e.target.value;
            updateCancelButton();
          });

        // Gérer la soumission du formulaire
        document
          .getElementById("settings-form")
          .addEventListener("submit", async (e) => {
            e.preventDefault();

            try {
              const response = await fetch("/api/settings", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(currentSettings),
              });

              if (response.ok) {
                originalSettings = { ...currentSettings };
                updateCancelButton();

                // Afficher une notification de succès
                const notification = document.createElement("div");
                notification.className = "notification success";
                notification.textContent =
                  "Paramètres enregistrés avec succès !";
                document.body.appendChild(notification);

                setTimeout(() => {
                  notification.remove();
                }, 3000);
              }
            } catch (error) {
              console.error(
                "Erreur lors de la sauvegarde des paramètres:",
                error
              );
              currentSettings = { ...originalSettings };
              updateFormValues(originalSettings);
              applySettings(originalSettings);
              updateCancelButton();
            }
          });

        // Gérer le clic sur le bouton Annuler
        cancelButton.addEventListener("click", () => {
          if (hasSettingsChanged()) {
            currentSettings = { ...originalSettings };
            updateFormValues(originalSettings);
            applySettings(originalSettings);
            updateCancelButton();
          }
        });

        // Gérer le survol du bouton Annuler
        cancelButton.addEventListener("mouseover", () => {
          if (hasSettingsChanged()) {
            cancelButton.style.backgroundColor = "#c82333";
            cancelButton.style.borderColor = "#bd2130";
          }
        });

        cancelButton.addEventListener("mouseout", () => {
          if (hasSettingsChanged()) {
            cancelButton.style.backgroundColor = "#dc3545";
            cancelButton.style.borderColor = "#dc3545";
          }
        });
      });
    </script>
  </body>
</html>
